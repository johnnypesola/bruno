{"version":3,"sources":["components/Card.tsx","components/Table.tsx","components/CardDeck.tsx","types/commonTypes.ts","components/Hand.tsx","components/CardPile.tsx","types/serverEventTypes.ts","utils.ts","types/clientEventTypes.ts","hooks/useApi.ts","App.tsx","hooks/useGameState.ts","constants.ts","index.tsx"],"names":["CardContainer","styled","div","isConcealed","color","offsetX","offsetY","rotation","onClick","Circle","ValueContainer","props","cardColor","Text","Card","value","CardColor","CardValue","PileContainer","DrawCard","CardDeck","state","useContext","GameStateContext","useState","isDrawCardVisible","setIsDrawCardVisible","console","log","playerTurn","player","position","setTimeout","HandContainer","tablePosition","numberOfPlayers","scale","getTablePositionStyle","isHighlighted","getHighlightedStyle","cardsCount","isPlayer","factor","mininumMargin","maximumMargin","val","Math","min","max","getCardMargin","Hand","children","opponents","length","SystemEvent","ServerEvent","Container","CardPile","cardPile","map","cardInPile","index","key","ClientEvent","useApi","socket","useRef","dispatch","useEffect","anEnum","server","URLSearchParams","window","location","search","get","current","io","Object","values","forEach","event","on","name","App","canPlay","isPlayersTurn","hasExitedGame","opponent","cards","card","Blue","Eight","Table","emit","PicksUpCard","cardIndex","PlaysCard","useGameState","useReducer","action","InitPlayer","newPlayer","cardsInPile","playerTurnPosition","flow","set","AddOpponent","UpdateOpponent","updatedOpponents","orgOpponent","id","RemoveOpponent","newOpponents","filter","PlayerPlaysCard","newCards","AddCardToPile","newState","shift","SetPlayerTurn","PlayerPickedUpCard","PlayerWins","alert","OpponentWins","GameRestarsInSeconds","isReversePlayDirection","React","createContext","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.8c8d8bfe.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { CardValue, CardColor } from '../types/commonTypes';\r\n\r\ninterface ComponentProps {\r\n  value: CardValue;\r\n  color: CardColor;\r\n  isConcealed: boolean;\r\n  onClick?: () => void;\r\n  rotation?: number;\r\n  offsetX?: number;\r\n  offsetY?: number;\r\n}\r\n\r\nconst CardContainer = styled.div<ComponentProps>`\r\n  margin: 2px;\r\n  display: inline-block;\r\n  border: 6px solid white;\r\n  border-radius: 5px;\r\n  padding: 20px 17px;\r\n  background: ${({ isConcealed, color }) => (isConcealed ? 'black' : color)};\r\n  position: relative;\r\n  color: black;\r\n  height: 60px;\r\n  width: 30px;\r\n  user-select: none;\r\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.5);\r\n  ${({ offsetX }) => (offsetX ? `left: ${offsetX}px;` : '')}\r\n  ${({ offsetY }) => (offsetY ? `top: ${offsetY}px;` : '')}\r\n  ${({ rotation }) => (rotation ? `transform: rotate(${rotation}deg);` : '')}\r\n  ${({ onClick }) => (onClick ? 'cursor: pointer;' : '')}\r\n`;\r\n\r\nconst Circle = styled.div`\r\n  height: 90px;\r\n  width: 50px;\r\n  border-radius: 50%;\r\n  background: white;\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 7px;\r\n  transform: rotate(35deg);\r\n`;\r\n\r\nconst ValueContainer = styled.div<{ cardColor: CardColor }>`\r\n  font-family: 'verdana';\r\n  font-weight: bold;\r\n  font-style: italic;\r\n  font-size: 45px;\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 15px;\r\n  color: ${props => props.cardColor};\r\n  text-shadow: 2px 2px 0px rgba(0, 0, 0, 1);\r\n`;\r\n\r\nconst Text = styled.div`\r\n  color: brown;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  transform: rotate(12deg);\r\n`;\r\n\r\nconst Card: React.FC<ComponentProps> = ({ color, value, isConcealed, onClick, rotation, offsetX, offsetY }) => (\r\n  <CardContainer\r\n    color={color}\r\n    isConcealed={isConcealed}\r\n    onClick={onClick}\r\n    rotation={rotation}\r\n    offsetX={offsetX}\r\n    offsetY={offsetY}\r\n    value={value}\r\n  >\r\n    {!isConcealed && (\r\n      <>\r\n        <Circle />\r\n        <ValueContainer cardColor={color}>{value}</ValueContainer>\r\n      </>\r\n    )}\r\n    {isConcealed && <Text>Bruno</Text>}\r\n  </CardContainer>\r\n);\r\n\r\nexport default Card;\r\n","import styled from 'styled-components';\r\n\r\nexport default styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  transform: rotateZ(0) rotateX(19deg) rotateY(0deg) translateZ(25px) translateX(-10px) translateY(0px);\r\n  align-items: center;\r\n  background: grey;\r\n  height: 60vh;\r\n  width: 400px;\r\n  border-radius: 3%;\r\n`;\r\n","import React, { useState, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport { GameStateContext } from '..';\r\n\r\nconst PileContainer = styled.div`\r\n  margin: 2px;\r\n  display: inline-block;\r\n  border: 6px solid white;\r\n  border-radius: 5px;\r\n  padding: 20px 17px;\r\n  background: black;\r\n  position: relative;\r\n  color: black;\r\n  height: 60px;\r\n  width: 30px;\r\n  user-select: none;\r\n  position: relative;\r\n  bottom: 20px;\r\n  cursor: pointer;\r\n\r\n  &:after {\r\n    background-color: gray;\r\n    background-image: linear-gradient(hsla(0, 0%, 100%, 0.25), hsla(0, 0%, 0%, 0.25));\r\n    border-radius: 5px;\r\n    content: '';\r\n    height: 28px;\r\n    left: -6px;\r\n    position: absolute;\r\n    top: 68px;\r\n    width: 76px;\r\n    transform: translateZ(0px) translateY(30px);\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\nconst Text = styled.div`\r\n  color: brown;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  transform: rotate(12deg);\r\n`;\r\n\r\nconst DrawCard = styled.div`\r\n  margin: -24px;\r\n  display: inline-block;\r\n  border: 6px solid white;\r\n  border-radius: 5px;\r\n  padding: 20px 17px;\r\n  background: black;\r\n  position: relative;\r\n  color: black;\r\n  height: 60px;\r\n  width: 30px;\r\n  user-select: none;\r\n  position: absolute;\r\n  bottom: 20px;\r\n\r\n  animation-duration: 0.8s;\r\n  animation-name: drawcard;\r\n  animation-fill-mode: forwards;\r\n\r\n  @keyframes drawcard {\r\n    from {\r\n      opacity: 1;\r\n      transform: rotateZ(0) rotateX(0) rotateY(0deg) translateZ(0px) translateX(0px) translateY(0);\r\n    }\r\n\r\n    to {\r\n      opacity: 0;\r\n      transform: rotateZ(-2deg) rotateX(40deg) rotateY(5deg) translateZ(0px) translateX(0px) translateY(120px);\r\n    }\r\n  }\r\n`;\r\n\r\ninterface ComponentProps {\r\n  onClick: () => void;\r\n}\r\n\r\nconst CardDeck: React.FC<ComponentProps> = ({ onClick }) => {\r\n  const { state } = useContext(GameStateContext);\r\n  const [isDrawCardVisible, setIsDrawCardVisible] = useState(false);\r\n\r\n  const handleOnClick = (): void => {\r\n    console.log(state.playerTurn, state.player.position);\r\n    if (state.playerTurn !== state.player.position) return;\r\n    onClick();\r\n    setIsDrawCardVisible(true);\r\n    setTimeout(() => {\r\n      setIsDrawCardVisible(false);\r\n    }, 800);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PileContainer onClick={handleOnClick}>\r\n        <Text>Bruno</Text>\r\n        {isDrawCardVisible && <DrawCard />}\r\n      </PileContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardDeck;\r\n","export enum CardColor {\r\n  Red = 'red',\r\n  Green = 'green',\r\n  Yellow = 'gold',\r\n  Blue = 'blue',\r\n}\r\n\r\nexport enum CardValue {\r\n  Zero = '0',\r\n  One = '1',\r\n  Two = '2',\r\n  Three = '3',\r\n  Four = '4',\r\n  Five = '5',\r\n  Six = '6',\r\n  Seven = '7',\r\n  Eight = '8',\r\n  Nine = '9',\r\n  // Reverse = '⇄',\r\n  PlusTwo = '✌️',\r\n  Skip = '🚫',\r\n}\r\n\r\nexport interface CardInHand {\r\n  color: CardColor;\r\n  value: CardValue;\r\n  isConcealed: boolean;\r\n}\r\n\r\nexport type HiddenCard = null;\r\n\r\nexport interface CardInPile {\r\n  color: CardColor;\r\n  value: CardValue;\r\n  rotation: number;\r\n  offsetX: number;\r\n  offsetY: number;\r\n  isEffectConsumed?: true;\r\n}\r\n\r\ninterface BasePlayer {\r\n  id: string;\r\n  hasExitedGame: boolean;\r\n}\r\n\r\nexport interface Opponent extends BasePlayer {\r\n  cards: HiddenCard[];\r\n  position: number;\r\n}\r\n\r\nexport interface Player extends BasePlayer {\r\n  cards: CardInHand[];\r\n  position: number;\r\n}\r\n\r\nexport interface InitPlayerDataContent {\r\n  newPlayer: Player;\r\n  opponents: Opponent[];\r\n  playerTurnPosition: number;\r\n  cardsInPile: CardInPile[];\r\n}\r\n\r\nexport interface GameState {\r\n  opponents: Opponent[];\r\n  player: Player;\r\n  cardPile: CardInPile[];\r\n  playerTurn: number;\r\n  isReversePlayDirection: boolean;\r\n}\r\n","import styled from 'styled-components';\r\nimport React, { useContext } from 'react';\r\nimport { GameStateContext } from '..';\r\n\r\nconst getTablePositionStyle = (tablePosition: number, numberOfPlayers: number): string => {\r\n  const scale = 1 - numberOfPlayers * 0.1;\r\n\r\n  switch (tablePosition) {\r\n    case 0:\r\n      return `\r\n        position: fixed;\r\n        bottom: 0px;\r\n        transform: rotateZ(0) rotateX(-22deg) rotateY(0deg) translateZ(80px) translateX(-10px) translateY(-7px);`;\r\n    case 1:\r\n      return `\r\n        position: fixed;\r\n        left: 290px;\r\n        transform: rotateZ(-350deg) rotateX(-70deg) rotateY(58deg) translateZ(-140px) translateX(-180px) translateY(-110px) skew(0deg, 10deg) scale(${scale})`;\r\n    case 2:\r\n      return `\r\n        position: fixed;\r\n        left: 180px;\r\n        transform: rotateZ(-344deg) rotateX(-75deg) rotateY(36deg) translateZ(-51px) translateX(80px) translateY(-77px) skew(0deg,10deg) scale(${scale})`;\r\n    case 3:\r\n      return `\r\n        position: fixed;\r\n        right: 260px;\r\n        transform: rotateZ(-330deg) rotateX(-72deg) rotateY(33deg) translateZ(-66px) translateX(80px) translateY(-77px) skew(0deg,10deg) scale(${scale})`;\r\n    case 4:\r\n      return `\r\n        position: fixed;\r\n        right: 290px;\r\n        transform: rotateZ(-350deg) rotateX(-70deg) rotateY(-22deg) translateZ(-140px) translateX(238px) translateY(-90px) skew(0deg, -2deg) scale(${scale})`;\r\n\r\n    default:\r\n      return '';\r\n  }\r\n};\r\n\r\nconst getCardMargin = (cardsCount: number, isPlayer: boolean): string => {\r\n  const factor = isPlayer ? 3 : 8;\r\n  const mininumMargin = isPlayer ? -40 : -60;\r\n  const maximumMargin = isPlayer ? -20 : 100;\r\n  const val = Math.min(Math.max(cardsCount * -factor, mininumMargin), maximumMargin);\r\n  return `0px 2px -5px ${val}px`;\r\n};\r\n\r\nconst getHighlightedStyle = (isHighlighted: boolean): string => {\r\n  if (!isHighlighted) return '';\r\n  return `\r\n    box-shadow: -20px 0 40px 10px rgba(255,255,255,0.7);\r\n  `;\r\n};\r\n\r\ninterface HandProps {\r\n  tablePosition: number;\r\n  cardsCount: number;\r\n  isHighlighted: boolean;\r\n  numberOfPlayers: number;\r\n}\r\n\r\nconst HandContainer = styled.div<HandProps>`\r\n  margin: 20px;\r\n  ${({ tablePosition, numberOfPlayers }) => getTablePositionStyle(tablePosition, numberOfPlayers)};\r\n  ${({ isHighlighted }) => getHighlightedStyle(isHighlighted)}\r\n\r\n  > * {\r\n    margin: ${({ cardsCount, tablePosition }) => {\r\n      const isPlayer = tablePosition === 0;\r\n      return getCardMargin(cardsCount, isPlayer);\r\n    }};\r\n\r\n    :hover {\r\n      transform: translateZ(140px) translateY(-5px) scale(1.1);\r\n      margin-right: 25px;\r\n    }\r\n    :last-child:hover {\r\n      margin-right: 0;\r\n    }\r\n\r\n    transition: all 0.2s ease;\r\n    animation-duration: 0.8s;\r\n    animation-name: getcard;\r\n    position: relative;\r\n  }\r\n\r\n  @keyframes getcard {\r\n    from {\r\n      bottom: 50px;\r\n      opacity: 0;\r\n    }\r\n\r\n    to {\r\n      bottom: 0;\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Hand: React.FC<Omit<HandProps, 'numberOfPlayers'>> = ({ children, ...props }) => {\r\n  const { state } = useContext(GameStateContext);\r\n  return (\r\n    <HandContainer numberOfPlayers={state.opponents.length + 1} {...props}>\r\n      {children}\r\n    </HandContainer>\r\n  );\r\n};\r\n\r\nexport default Hand;\r\n","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport { GameStateContext } from '..';\r\nimport Card from './Card';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  height: 100px;\r\n  width: 100px;\r\n  margin-left: 50px;\r\n\r\n  > * {\r\n    position: absolute;\r\n\r\n    animation-duration: 0.3s;\r\n    animation-name: laycard;\r\n  }\r\n\r\n  @keyframes laycard {\r\n    from {\r\n      margin-top: -100%;\r\n      opacity: 0;\r\n    }\r\n\r\n    to {\r\n      margin-top: 0%;\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CardPile: React.FC = () => {\r\n  const { state } = useContext(GameStateContext);\r\n\r\n  return (\r\n    <Container>\r\n      {state.cardPile.map((cardInPile, index) => (\r\n        <Card\r\n          key={index}\r\n          color={cardInPile.color}\r\n          value={cardInPile.value}\r\n          isConcealed={false}\r\n          rotation={cardInPile.rotation}\r\n          offsetX={cardInPile.offsetX}\r\n          offsetY={cardInPile.offsetY}\r\n        />\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CardPile;\r\n","import { Opponent, CardInHand, CardInPile, InitPlayerDataContent } from './commonTypes';\r\n\r\nexport type ApiEvent = SystemEvent | ServerEvent;\r\n\r\nexport enum SystemEvent {\r\n  NewConnection = 'connection',\r\n  ConnectionClosed = 'disconnect',\r\n}\r\n\r\nexport enum ServerEvent {\r\n  // Player\r\n  InitPlayer = 'InitPlayer',\r\n  PlayerPlaysCard = 'PlayerPlaysCard',\r\n  PlayerPickedUpCard = 'PlayerPickedUpCard',\r\n  PlayerWins = 'PlayerWins',\r\n\r\n  // Opponent\r\n  AddOpponent = 'AddOpponent',\r\n  RemoveOpponent = 'RemoveOpponent',\r\n  UpdateOpponent = 'UpdateOpponent',\r\n  OpponentWins = 'OpponentWins',\r\n\r\n  // Turn\r\n  SetPlayerTurn = 'SetPlayerTurn',\r\n\r\n  // CardPile\r\n  AddCardToPile = 'AddCardToPile',\r\n\r\n  // Game\r\n  GameRestarsInSeconds = 'GameRestarsInSeconds',\r\n}\r\n\r\nexport interface InitPlayerData {\r\n  name: ServerEvent.InitPlayer;\r\n  value: InitPlayerDataContent;\r\n}\r\nexport interface AddOpponentData {\r\n  name: ServerEvent.AddOpponent;\r\n  value: { opponent: Opponent };\r\n}\r\nexport interface UpdateOpponentData {\r\n  name: ServerEvent.UpdateOpponent;\r\n  value: { opponent: Opponent };\r\n}\r\n\r\nexport interface RemoveOpponentData {\r\n  name: ServerEvent.RemoveOpponent;\r\n  value: { id: string };\r\n}\r\n\r\nexport interface PlayerPlaysCardData {\r\n  name: ServerEvent.PlayerPlaysCard;\r\n  value: { newCards: CardInHand[] };\r\n}\r\n\r\nexport interface OpponentWinsData {\r\n  name: ServerEvent.OpponentWins;\r\n  value: { opponent: Opponent };\r\n}\r\n\r\nexport interface PlayerPicksUpCardData {\r\n  name: ServerEvent.PlayerPickedUpCard;\r\n  value: { card: CardInHand };\r\n}\r\n\r\nexport interface PlayerWinsData {\r\n  name: ServerEvent.PlayerWins;\r\n  value: {};\r\n}\r\n\r\nexport interface SetPlayerTurnData {\r\n  name: ServerEvent.SetPlayerTurn;\r\n  value: { position: number };\r\n}\r\n\r\nexport interface AddCardToPileData {\r\n  name: ServerEvent.AddCardToPile;\r\n  value: { card: CardInPile };\r\n}\r\n\r\nexport interface GameRestarsInSeconds {\r\n  name: ServerEvent.GameRestarsInSeconds;\r\n  value: { seconds: number };\r\n}\r\n\r\nexport type GameStateAction =\r\n  | InitPlayerData\r\n  | AddOpponentData\r\n  | UpdateOpponentData\r\n  | RemoveOpponentData\r\n  | PlayerPlaysCardData\r\n  | OpponentWinsData\r\n  | PlayerPicksUpCardData\r\n  | PlayerWinsData\r\n  | SetPlayerTurnData\r\n  | GameRestarsInSeconds\r\n  | AddCardToPileData;\r\n","import { CardInHand, CardColor, CardValue, CardInPile } from './types/commonTypes';\r\n\r\nconst initialNumberOfCardsInHand = 7;\r\n\r\nexport function randomEnum<T>(anEnum: T): T[keyof T] {\r\n  const enumValues = (Object.values(anEnum) as unknown) as T[keyof T][];\r\n  const randomIndex = Math.floor(Math.random() * enumValues.length);\r\n  return enumValues[randomIndex];\r\n}\r\n\r\nexport function enumAsValues<T>(anEnum: T): T[keyof T][] {\r\n  return (Object.values(anEnum) as unknown) as T[keyof T][];\r\n}\r\n\r\nexport const getRandomCard = (isConcealed = true): CardInHand => {\r\n  return {\r\n    color: randomEnum(CardColor),\r\n    value: randomEnum(CardValue),\r\n    isConcealed: isConcealed,\r\n  };\r\n};\r\n\r\nexport const getInitialHand = (isConcealed = true): CardInHand[] => {\r\n  const initialHand: CardInHand[] = [];\r\n\r\n  while (initialHand.length < initialNumberOfCardsInHand) {\r\n    initialHand.push(getRandomCard(isConcealed));\r\n  }\r\n\r\n  return initialHand;\r\n};\r\n\r\nexport const toPileCard = (card: CardInHand): CardInPile => {\r\n  const randomRotation = Math.floor(Math.random() * 360);\r\n  const randomOffsetX = Math.floor(Math.random() * 50) - 25;\r\n  const randomOffsetY = Math.floor(Math.random() * 50) - 25;\r\n  return {\r\n    ...card,\r\n    rotation: randomRotation,\r\n    offsetX: randomOffsetX,\r\n    offsetY: randomOffsetY,\r\n  };\r\n};\r\n\r\nexport const getTopCard = (cards: CardInPile[]): CardInPile => cards[cards.length - 1];\r\n\r\nexport const doCardsMatch = (card1: CardInHand | CardInPile, card2: CardInHand | CardInPile): boolean =>\r\n  card1.color === card2.color || card1.value === card2.value;\r\n","export enum ClientEvent {\r\n  PlayerAdded = 'PlayerAdded',\r\n  PlayerInit = 'PlayerInit',\r\n  PlayerRemoved = 'PlayerRemoved',\r\n  PlaysCard = 'PlaysCard',\r\n  PlayedCard = 'PlayedCard',\r\n  PicksUpCard = 'PicksUpCard',\r\n  PickedUpCard = 'PickedUpCard',\r\n  NextPlayerTurn = 'NextPlayerTurn',\r\n}\r\n\r\n// export enum OpponentEvent {\r\n//   OpponentAdded = 'OpponentAdded',\r\n//   OpponentRemoved = 'OpponentRemoved',\r\n//   OpponentUpdate = 'OpponentUpdate',\r\n// }\r\n\r\n// export enum CardPileEvent {\r\n//   CardAddedToPile = 'CardAddedToPile',\r\n// }\r\n","import { useEffect, useRef, useContext } from 'react';\r\nimport io, { Socket } from 'socket.io-client';\r\nimport { GameStateContext } from '..';\r\nimport { ServerEvent } from '../types/serverEventTypes';\r\nimport { enumAsValues } from '../utils';\r\n\r\nconst useApi = (): Socket => {\r\n  const socket = useRef<Socket>();\r\n  const { dispatch } = useContext(GameStateContext);\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const server = params.get('server') || 'http://localhost:8080';\r\n    socket.current = io(server);\r\n\r\n    // Receive real-time events through Socket.io\r\n    // and dispatch them directly into game state reducer.\r\n    enumAsValues(ServerEvent).forEach(event => {\r\n      socket.current?.on(event, (value: any) => {\r\n        dispatch({\r\n          name: event,\r\n          value,\r\n        });\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return socket.current as Socket;\r\n};\r\n\r\nexport default useApi;\r\n","import React, { useContext } from 'react';\r\nimport Card from './components/Card';\r\nimport Table from './components/Table';\r\nimport CardDeck from './components/CardDeck';\r\nimport { CardInHand, Opponent, CardColor, CardValue } from './types/commonTypes';\r\nimport { GameStateContext } from '.';\r\nimport Hand from './components/Hand';\r\nimport CardPile from './components/CardPile';\r\nimport useApi from './hooks/useApi';\r\nimport { ClientEvent } from './types/clientEventTypes';\r\n\r\nconst App: React.FC = () => {\r\n  const { state } = useContext(GameStateContext);\r\n\r\n  const socket = useApi();\r\n\r\n  const canPlay = (): boolean => {\r\n    const isPlayersTurn = state.playerTurn === state.player.position;\r\n    const isPlayerInGame = !state.player.hasExitedGame;\r\n    return isPlayerInGame && isPlayersTurn;\r\n  };\r\n\r\n  const PickUpCard = (): void => {\r\n    if (!canPlay()) return;\r\n    socket.emit(ClientEvent.PicksUpCard);\r\n  };\r\n\r\n  const placeCardFromHand = (cardInHand: CardInHand, cardIndex: number): void => {\r\n    if (!canPlay()) return;\r\n\r\n    socket.emit(ClientEvent.PlaysCard, cardIndex);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {state.opponents.map((opponent: Opponent, index) => (\r\n        <Hand\r\n          key={index}\r\n          isHighlighted={state.playerTurn === opponent.position}\r\n          tablePosition={opponent.position}\r\n          cardsCount={opponent.cards.length}\r\n        >\r\n          {opponent.cards.map((card, index) => (\r\n            <Card key={index} color={CardColor.Blue} value={CardValue.Eight} isConcealed={true} />\r\n          ))}\r\n        </Hand>\r\n      ))}\r\n\r\n      <Table>\r\n        <CardDeck onClick={() => PickUpCard()} />\r\n        <CardPile />\r\n      </Table>\r\n\r\n      <Hand\r\n        isHighlighted={state.playerTurn === state.player.position}\r\n        tablePosition={0}\r\n        cardsCount={state.player.cards.length}\r\n      >\r\n        {state.player.cards.map((card, index) => (\r\n          <Card\r\n            key={index}\r\n            color={card.color}\r\n            value={card.value}\r\n            isConcealed={card.isConcealed}\r\n            onClick={() => placeCardFromHand(card, index)}\r\n          />\r\n        ))}\r\n      </Hand>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { useReducer, Dispatch } from 'react';\r\nimport set from 'lodash/fp/set';\r\nimport { flow } from 'lodash/fp';\r\nimport { ServerEvent, GameStateAction } from '../types/serverEventTypes';\r\nimport { GameState } from '../types/commonTypes';\r\nimport { maxNumberOfPileCards } from '../constants';\r\n\r\nconst useGameState = (): [GameState, Dispatch<GameStateAction>] => {\r\n  const reducer = (state: GameState, action: GameStateAction): GameState => {\r\n    if (action.name === ServerEvent.InitPlayer) {\r\n      const { newPlayer, cardsInPile, opponents, playerTurnPosition } = action.value;\r\n\r\n      const newState = flow(\r\n        // Update state in sequence\r\n        set(['player'], newPlayer),\r\n        set(['opponents'], opponents),\r\n        set(['cardPile'], cardsInPile),\r\n        set(['playerTurn'], playerTurnPosition),\r\n      )(state);\r\n\r\n      return newState;\r\n    }\r\n\r\n    if (action.name === ServerEvent.AddOpponent) {\r\n      const { opponent } = action.value;\r\n      console.log('add opponent', opponent);\r\n      return set(['opponents'], [...state.opponents, opponent])(state);\r\n    }\r\n\r\n    if (action.name === ServerEvent.UpdateOpponent) {\r\n      const { opponent } = action.value;\r\n\r\n      const updatedOpponents = state.opponents.map(orgOpponent =>\r\n        orgOpponent.id === opponent.id ? opponent : orgOpponent,\r\n      );\r\n\r\n      return set(['opponents'], updatedOpponents)(state);\r\n    }\r\n\r\n    if (action.name === ServerEvent.RemoveOpponent) {\r\n      const { id } = action.value;\r\n      const newOpponents = state.opponents.filter(opponent => opponent.id !== id);\r\n\r\n      return set(['opponents'], [...newOpponents])(state);\r\n    }\r\n\r\n    if (action.name === ServerEvent.PlayerPlaysCard) {\r\n      const { newCards } = action.value;\r\n\r\n      return set(['player', 'cards'], newCards)(state);\r\n    }\r\n\r\n    if (action.name === ServerEvent.AddCardToPile) {\r\n      const { card } = action.value;\r\n      const newState = { ...state };\r\n\r\n      // Limit number of visible cards in pile for better performance.\r\n      if (newState.cardPile.length > maxNumberOfPileCards) {\r\n        newState.cardPile.shift();\r\n      }\r\n\r\n      return set(['cardPile'], [...state.cardPile, card])(newState);\r\n    }\r\n\r\n    if (action.name === ServerEvent.SetPlayerTurn) {\r\n      const { position } = action.value;\r\n\r\n      return set(['playerTurn'], position)(state);\r\n    }\r\n\r\n    if (action.name === ServerEvent.PlayerPickedUpCard) {\r\n      const { card } = action.value;\r\n\r\n      return set(['player', 'cards'], [...state.player.cards, card])(state);\r\n    }\r\n\r\n    if (action.name === ServerEvent.PlayerWins) {\r\n      alert('You did it! You are the champ!');\r\n    }\r\n\r\n    if (action.name === ServerEvent.OpponentWins) {\r\n      alert(`Darnit! Your opponnent just won. What a bummer!`);\r\n    }\r\n\r\n    if (action.name === ServerEvent.GameRestarsInSeconds) {\r\n    }\r\n\r\n    // Default fallback\r\n    return state;\r\n  };\r\n\r\n  const initialGameState: GameState = {\r\n    player: { id: 'Player', cards: [], hasExitedGame: false, position: 0 },\r\n    opponents: [],\r\n    cardPile: [],\r\n    playerTurn: -1,\r\n    isReversePlayDirection: false,\r\n  };\r\n\r\n  return useReducer(reducer, initialGameState);\r\n};\r\n\r\nexport default useGameState;\r\n","export const initialNumberOfCardsInHand = 7;\r\nexport const maxNumberOfPileCards = 20;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport useGameState from './hooks/useGameState';\r\nimport { GameState } from './types/commonTypes';\r\nimport { GameStateAction } from './types/serverEventTypes';\r\n\r\nexport const GameStateContext = React.createContext(\r\n  (null as unknown) as { state: GameState; dispatch: React.Dispatch<GameStateAction> },\r\n);\r\n\r\nconst RootComponent: React.FC = () => {\r\n  const [state, dispatch] = useGameState();\r\n\r\n  return (\r\n    <GameStateContext.Provider value={{ state, dispatch }}>\r\n      <App />\r\n    </GameStateContext.Provider>\r\n  );\r\n};\r\n\r\nReactDOM.render(<RootComponent />, document.getElementById('root'));\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/Card.tsx","components/Table.tsx","utils.ts","types/gameStateActionTypes.ts","constants.ts","components/CardDeck.tsx","types/commonTypes.ts","hooks/useInterval.ts","hooks/useAIPlayers.ts","components/Hand.tsx","components/CardPile.tsx","App.tsx","hooks/useGameState.ts","index.tsx"],"names":["CardColor","CardValue","CardContainer","styled","div","isConcealed","color","offsetX","offsetY","rotation","onClick","Circle","ValueContainer","props","cardColor","Text","Card","value","randomEnum","anEnum","enumValues","Object","values","Math","floor","random","length","Action","getRandomCard","toPileCard","card","randomRotation","randomOffsetX","randomOffsetY","getInitialHand","initialHand","push","doCardsMatch","card1","card2","getTopCard","cards","TablePosition","Container","CardDeck","useContext","GameStateContext","state","dispatch","isPlayersTurn","playerTurn","player","hasExitedGame","name","PlayerDrawsNewCard","setTimeout","SetNextPlayerTurn","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useAIPlayers","opponentIndex","opponents","cardIndex","findIndex","cardPile","HandleCardEffectForOpponent","OpponentPlaysCard","OpponentDrawsCard","HandleAnyPlayerOutOfCards","tablePosition","Player","OpponentLeft","OpponentRight","getTablePositionStyle","cardsCount","isPlayer","factor","mininumMargin","val","max","getCardMargin","CardPile","map","cardInPile","index","key","App","HandleCardEffectForPlayer","opponent","Hand","position","Table","cardInHand","PlayerPlaysCard","placeCardFromHand","useGameState","initialGameState","isReversePlayDirection","useReducer","action","newTopCard","newCards","filter","newState","flow","set","Reverse","newCard","PlusTwo","nextPlayerIndex","opponentOutOfCardsIndex","console","log","React","createContext","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.509e0a6d.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport enum CardColor {\n  Red = 'red',\n  Green = 'green',\n  Yellow = 'gold',\n  Blue = 'blue',\n}\n\nexport enum CardValue {\n  Zero = '0',\n  One = '1',\n  Two = '2',\n  Three = '3',\n  Four = '4',\n  Five = '5',\n  Six = '6',\n  Seven = '7',\n  Eight = '8',\n  Nine = '9',\n  Reverse = 'â‡„',\n  PlusTwo = '+2',\n}\n\ninterface ComponentProps {\n  value: CardValue;\n  color: CardColor;\n  isConcealed: boolean;\n  onClick?: () => void;\n  rotation?: number;\n  offsetX?: number;\n  offsetY?: number;\n}\n\nconst CardContainer = styled.div<ComponentProps>`\n  margin: 2px;\n  display: inline-block;\n  border: 6px solid white;\n  border-radius: 5px;\n  padding: 20px 17px;\n  background: ${({ isConcealed, color }) => (isConcealed ? 'black' : color)};\n  position: relative;\n  color: black;\n  height: 60px;\n  width: 30px;\n  user-select: none;\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.5);\n  ${({ offsetX }) => (offsetX ? `left: ${offsetX}px;` : '')}\n  ${({ offsetY }) => (offsetY ? `top: ${offsetY}px;` : '')}\n  ${({ rotation }) => (rotation ? `transform: rotate(${rotation}deg);` : '')}\n  ${({ onClick }) => (onClick ? 'cursor: pointer;' : '')}\n`;\n\nconst Circle = styled.div`\n  height: 90px;\n  width: 50px;\n  border-radius: 50%;\n  background: white;\n  position: absolute;\n  top: 5px;\n  left: 7px;\n  transform: rotate(35deg);\n`;\n\nconst ValueContainer = styled.div<{ cardColor: CardColor }>`\n  font-family: 'verdana';\n  font-weight: bold;\n  font-style: italic;\n  font-size: 45px;\n  position: absolute;\n  top: 20px;\n  left: 15px;\n  color: ${props => props.cardColor};\n  text-shadow: 2px 2px 0px rgba(0, 0, 0, 1);\n`;\n\nconst Text = styled.div`\n  color: brown;\n  font-size: 12px;\n  font-weight: bold;\n  transform: rotate(12deg);\n`;\n\nconst Card: React.FC<ComponentProps> = ({ color, value, isConcealed, onClick, rotation, offsetX, offsetY }) => (\n  <CardContainer\n    color={color}\n    isConcealed={isConcealed}\n    onClick={onClick}\n    rotation={rotation}\n    offsetX={offsetX}\n    offsetY={offsetY}\n    value={value}\n  >\n    {!isConcealed && (\n      <>\n        <Circle />\n        <ValueContainer cardColor={color}>{value}</ValueContainer>\n      </>\n    )}\n    {isConcealed && <Text>Bruno</Text>}\n  </CardContainer>\n);\n\nexport default Card;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  justify-content: center;\n  transform: rotateZ(0) rotateX(19deg) rotateY(0deg) translateZ(25px) translateX(-10px) translateY(0px);\n  align-items: center;\n  background: grey;\n  height: 60vh;\n  width: 400px;\n  border-radius: 3%;\n`;\n","import { initialNumberOfCardsInHand } from './constants';\nimport { CardColor, CardValue } from './components/Card';\nimport { CardInHand, GameState, CardInPile } from './types/commonTypes';\n\nexport function randomEnum<T>(anEnum: T): T[keyof T] {\n  const enumValues = (Object.values(anEnum) as unknown) as T[keyof T][];\n  const randomIndex = Math.floor(Math.random() * enumValues.length);\n  return enumValues[randomIndex];\n}\n\nexport const getRandomCard = (isConcealed = true): CardInHand => {\n  return {\n    color: randomEnum(CardColor),\n    value: randomEnum(CardValue),\n    isConcealed: isConcealed,\n  };\n};\n\nexport const toPileCard = (card: CardInHand): CardInPile => {\n  const randomRotation = Math.floor(Math.random() * 360);\n  const randomOffsetX = Math.floor(Math.random() * 50) - 25;\n  const randomOffsetY = Math.floor(Math.random() * 50) - 25;\n  return {\n    ...card,\n    rotation: randomRotation,\n    offsetX: randomOffsetX,\n    offsetY: randomOffsetY,\n  };\n};\n\nexport const getInitialHand = (isConcealed = true): CardInHand[] => {\n  const initialHand: CardInHand[] = [];\n\n  while (initialHand.length < initialNumberOfCardsInHand) {\n    initialHand.push(getRandomCard(isConcealed));\n  }\n\n  return initialHand;\n};\n\nexport const doCardsMatch = (card1: CardInHand | CardInPile, card2: CardInHand | CardInPile): boolean =>\n  card1.color === card2.color || card1.value === card2.value;\n\nexport const getTopCard = (cards: CardInPile[]): CardInPile => cards[cards.length - 1];\n","export enum Action {\n  PlayerPlaysCard,\n  OpponentPlaysCard,\n  OpponentDrawsCard,\n  PlayerDrawsNewCard,\n  SetNextPlayerTurn,\n  HandleAnyPlayerOutOfCards,\n  HandleCardEffectForPlayer,\n  HandleCardEffectForOpponent,\n}\n\nexport interface PlayerPlaysCardAction {\n  name: Action.PlayerPlaysCard;\n  value: { cardIndex: number };\n}\n\nexport interface OpponentPlaysCardAction {\n  name: Action.OpponentPlaysCard;\n  value: { opponentIndex: number; cardIndex: number };\n}\nexport interface OpponentDrawsCardAction {\n  name: Action.OpponentDrawsCard;\n  value: { opponentIndex: number };\n}\n\nexport interface PlayerDrawsCardAction {\n  name: Action.PlayerDrawsNewCard;\n}\n\nexport interface SetNextPlayerTurn {\n  name: Action.SetNextPlayerTurn;\n}\n\nexport interface HandleAnyPlayerOutOfCards {\n  name: Action.HandleAnyPlayerOutOfCards;\n}\n\nexport interface HandleCardEffectForPlayer {\n  name: Action.HandleCardEffectForPlayer;\n}\nexport interface HandleCardEffectForOpponent {\n  name: Action.HandleCardEffectForOpponent;\n  value: { opponentIndex: number };\n}\n\nexport type GameStateAction =\n  | PlayerPlaysCardAction\n  | OpponentPlaysCardAction\n  | OpponentDrawsCardAction\n  | PlayerDrawsCardAction\n  | SetNextPlayerTurn\n  | HandleAnyPlayerOutOfCards\n  | HandleCardEffectForPlayer\n  | HandleCardEffectForOpponent;\n","export const initialNumberOfCardsInHand = 7;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { GameStateContext } from '..';\nimport { Action } from '../types/gameStateActionTypes';\n\nconst Container = styled.div`\n  margin: 2px;\n  display: inline-block;\n  border: 6px solid white;\n  border-radius: 5px;\n  padding: 20px 17px;\n  background: black;\n  position: relative;\n  color: black;\n  height: 60px;\n  width: 30px;\n  user-select: none;\n  position: relative;\n  bottom: 20px;\n  cursor: pointer;\n\n  &:after {\n    background-color: gray;\n    background-image: linear-gradient(hsla(0, 0%, 100%, 0.25), hsla(0, 0%, 0%, 0.25));\n    border-radius: 5px;\n    content: '';\n    height: 28px;\n    left: -6px;\n    position: absolute;\n    top: 68px;\n    width: 76px;\n    transform: translateZ(0px) translateY(30px);\n    z-index: -1;\n  }\n`;\n\nconst Text = styled.div`\n  color: brown;\n  font-size: 12px;\n  font-weight: bold;\n  transform: rotate(12deg);\n`;\n\nconst CardDeck: React.FC = () => {\n  const { state, dispatch } = useContext(GameStateContext);\n\n  const onClickHandler = (): void => {\n    const isPlayersTurn = state.playerTurn === -1;\n    const isPlayerInGame = !state.player.hasExitedGame;\n    if (!isPlayerInGame || !isPlayersTurn) return;\n    dispatch({ name: Action.PlayerDrawsNewCard });\n    setTimeout(() => dispatch({ name: Action.SetNextPlayerTurn }), 1000);\n  };\n\n  return (\n    <Container onClick={onClickHandler}>\n      <Text>Bruno</Text>\n    </Container>\n  );\n};\n\nexport default CardDeck;\n","import { CardColor, CardValue } from '../components/Card';\n\nexport interface CardInHand {\n  color: CardColor;\n  value: CardValue;\n  isConcealed: boolean;\n}\n\nexport interface CardInPile {\n  color: CardColor;\n  value: CardValue;\n  rotation: number;\n  offsetX: number;\n  offsetY: number;\n}\n\nexport enum TablePosition {\n  OpponentRight,\n  OpponentLeft,\n  OpponentTop,\n  Player,\n}\n\ninterface BasePlayer {\n  cards: CardInHand[];\n  hasExitedGame: boolean;\n}\n\ninterface Opponent extends BasePlayer {\n  name: string;\n  position: TablePosition;\n}\n\ntype Player = BasePlayer;\n\nexport interface GameState {\n  opponents: Opponent[];\n  player: Player;\n  cardPile: CardInPile[];\n  playerTurn: number;\n  isReversePlayDirection: boolean;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useEffect, useRef } from 'react';\n\ntype RefType = () => any | undefined;\n\nconst useInterval = (callback: () => any, delay: number): void => {\n  const savedCallback = useRef<RefType>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    const tick = (): void => savedCallback.current && savedCallback.current();\n\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n};\n\nexport default useInterval;\n","import { useContext } from 'react';\nimport { doCardsMatch, getTopCard } from '../utils';\nimport { GameStateContext } from '..';\nimport useInterval from './useInterval';\nimport { Action } from '../types/gameStateActionTypes';\n\nconst useAIPlayers = (): void => {\n  const { state, dispatch } = useContext(GameStateContext);\n  const getCardToPlayIndex = (): number => {\n    const matchingCardIndex = state.opponents[state.playerTurn].cards.findIndex(card =>\n      doCardsMatch(card, getTopCard(state.cardPile)),\n    );\n    return matchingCardIndex;\n  };\n\n  // Game loop\n  useInterval(() => {\n    const isAIPlayersTurn = state.playerTurn !== -1;\n\n    if (isAIPlayersTurn) {\n      const opponentIndex = state.playerTurn;\n      const isOpponentInGame = !state.opponents[opponentIndex].hasExitedGame;\n\n      if (isOpponentInGame) {\n        const cardIndex = getCardToPlayIndex();\n\n        dispatch({ name: Action.HandleCardEffectForOpponent, value: { opponentIndex } });\n\n        if (cardIndex !== -1) {\n          dispatch({\n            name: Action.OpponentPlaysCard,\n            value: { cardIndex, opponentIndex },\n          });\n        } else {\n          dispatch({\n            name: Action.OpponentDrawsCard,\n            value: { opponentIndex },\n          });\n        }\n      }\n\n      dispatch({ name: Action.HandleAnyPlayerOutOfCards });\n      dispatch({ name: Action.SetNextPlayerTurn });\n    }\n  }, 1000);\n};\n\nexport default useAIPlayers;\n","import styled from 'styled-components';\nimport { TablePosition } from '../types/commonTypes';\n\nconst getTablePositionStyle = (tablePosition: TablePosition): string => {\n  switch (tablePosition) {\n    case TablePosition.Player:\n      return `\n        position: fixed;\n        bottom: 0px;\n        transform: rotateZ(0) rotateX(-22deg) rotateY(0deg) translateZ(20px) translateX(-10px) translateY(0px);`;\n    case TablePosition.OpponentLeft:\n      return `\n        position: fixed;\n        left: 290px;\n        transform: rotateZ(-350deg) rotateX(-70deg) rotateY(58deg) translateZ(-140px) translateX(-180px) translateY(-90px) skew(0deg, 10deg)`;\n    case TablePosition.OpponentRight:\n      return `\n        position: fixed;\n        right: 290px;\n        transform: rotateZ(-350deg) rotateX(-70deg) rotateY(-22deg) translateZ(-140px) translateX(238px) translateY(-90px) skew(0deg, -2deg)`;\n\n    default:\n      return '';\n  }\n};\n\nconst getCardMargin = (cardsCount: number, isPlayer: boolean): string => {\n  const factor = isPlayer ? 3 : 8;\n  const mininumMargin = isPlayer ? -40 : -60;\n  const val = Math.max(cardsCount * -factor, mininumMargin);\n  return `2px 2px 2px ${val}px`;\n};\n\ninterface HandProps {\n  tablePosition: TablePosition;\n  cardsCount: number;\n}\n\nexport default styled.div<HandProps>`\n  margin: 20px;\n  ${({ tablePosition }) => getTablePositionStyle(tablePosition)};\n\n  > * {\n    margin: ${({ cardsCount, tablePosition }) => {\n      const isPlayer = tablePosition === TablePosition.Player;\n      return getCardMargin(cardsCount, isPlayer);\n    }};\n  }\n`;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { GameStateContext } from '..';\nimport Card from './Card';\n\nconst Container = styled.div`\n  position: relative;\n  height: 100px;\n  width: 100px;\n  margin-left: 50px;\n\n  > * {\n    position: absolute;\n  }\n`;\n\nconst CardPile: React.FC = () => {\n  const { state } = useContext(GameStateContext);\n\n  return (\n    <Container>\n      {state.cardPile.map((cardInPile, index) => (\n        <Card\n          key={index}\n          color={cardInPile.color}\n          value={cardInPile.value}\n          isConcealed={false}\n          rotation={cardInPile.rotation}\n          offsetX={cardInPile.offsetX}\n          offsetY={cardInPile.offsetY}\n        />\n      ))}\n    </Container>\n  );\n};\n\nexport default CardPile;\n","import React, { useContext, useEffect } from 'react';\nimport Card from './components/Card';\nimport Table from './components/Table';\nimport { doCardsMatch, getTopCard } from './utils';\nimport CardDeck from './components/CardDeck';\nimport { CardInHand, TablePosition } from './types/commonTypes';\nimport { GameStateContext } from '.';\nimport { Action } from './types/gameStateActionTypes';\nimport useAIPlayers from './hooks/useAIPlayers';\nimport Hand from './components/Hand';\nimport CardPile from './components/CardPile';\n\nconst App: React.FC = () => {\n  const { state, dispatch } = useContext(GameStateContext);\n\n  useAIPlayers();\n\n  const placeCardFromHand = (cardInHand: CardInHand, cardIndex: number): void => {\n    const isPlayersTurn = state.playerTurn === -1;\n    const isPlayerInGame = !state.player.hasExitedGame;\n    if (!isPlayerInGame || !isPlayersTurn) return;\n\n    if (doCardsMatch(cardInHand, getTopCard(state.cardPile))) {\n      dispatch({\n        name: Action.PlayerPlaysCard,\n        value: { cardIndex },\n      });\n      dispatch({ name: Action.HandleAnyPlayerOutOfCards });\n      setTimeout(() => dispatch({ name: Action.SetNextPlayerTurn }), 1000);\n    }\n  };\n\n  useEffect(() => {\n    if (state.playerTurn === -1) dispatch({ name: Action.HandleCardEffectForPlayer });\n  }, [state.cardPile, state.playerTurn, dispatch]);\n\n  return (\n    <>\n      {state.opponents.map((opponent, index) => (\n        <Hand key={index} tablePosition={opponent.position} cardsCount={opponent.cards.length}>\n          {opponent.cards.map((card, index) => (\n            <Card key={index} color={card.color} value={card.value} isConcealed={card.isConcealed} />\n          ))}\n        </Hand>\n      ))}\n\n      <Table>\n        <CardDeck />\n        <CardPile />\n      </Table>\n\n      <Hand tablePosition={TablePosition.Player} cardsCount={state.player.cards.length}>\n        {state.player.cards.map((card, index) => (\n          <Card\n            key={index}\n            color={card.color}\n            value={card.value}\n            isConcealed={card.isConcealed}\n            onClick={() => placeCardFromHand(card, index)}\n          />\n        ))}\n      </Hand>\n    </>\n  );\n};\n\nexport default App;\n","import { useReducer, Dispatch } from 'react';\nimport { getInitialHand, getRandomCard, getTopCard, toPileCard } from '../utils';\nimport set from 'lodash/fp/set';\nimport { flow } from 'lodash/fp';\nimport {\n  GameStateAction,\n  PlayerPlaysCardAction,\n  Action,\n  OpponentPlaysCardAction,\n  OpponentDrawsCardAction,\n  HandleCardEffectForOpponent,\n} from '../types/gameStateActionTypes';\nimport { GameState, TablePosition } from '../types/commonTypes';\nimport { CardValue } from '../components/Card';\n\nconst useGameState = (): [GameState, Dispatch<GameStateAction>] => {\n  const reducer = (state: GameState, action: GameStateAction): GameState => {\n    if (action.name === Action.PlayerPlaysCard) {\n      const { cardIndex } = (action as PlayerPlaysCardAction).value;\n      const newTopCard = toPileCard(state.player.cards[cardIndex]);\n      const newCards = state.player.cards.filter((card, index) => index !== cardIndex);\n\n      let newState = flow(\n        // Update state in sequence\n        set(['player', 'cards'], newCards),\n        set(['cardPile'], [...state.cardPile, newTopCard]),\n      )(state);\n\n      if (newTopCard.value === CardValue.Reverse) {\n        newState = set(['isReversePlayDirection'], !state.isReversePlayDirection)(newState);\n      }\n      return newState;\n    }\n\n    if (action.name === Action.OpponentPlaysCard) {\n      const { cardIndex, opponentIndex } = (action as OpponentPlaysCardAction).value;\n      const opponent = state.opponents[opponentIndex];\n      const newTopCard = toPileCard(opponent.cards[cardIndex]);\n      const newCards = opponent.cards.filter((card, index) => index !== cardIndex);\n\n      let newState = flow(\n        // Update state in sequence\n        set(['opponents', opponentIndex, 'cards'], newCards),\n        set(['cardPile'], [...state.cardPile, newTopCard]),\n      )(state);\n\n      if (newTopCard.value === CardValue.Reverse) {\n        newState = set(['isReversePlayDirection'], !state.isReversePlayDirection)(newState);\n      }\n      return newState;\n    }\n\n    if (action.name === Action.OpponentDrawsCard) {\n      const { opponentIndex } = (action as OpponentDrawsCardAction).value;\n      const newCard = getRandomCard();\n      return set(['opponents', opponentIndex, 'cards'], [...state.opponents[opponentIndex].cards, newCard])(state);\n    }\n\n    if (action.name === Action.HandleCardEffectForOpponent) {\n      const { opponentIndex } = (action as HandleCardEffectForOpponent).value;\n\n      if (getTopCard(state.cardPile).value == CardValue.PlusTwo) {\n        const newCards = [getRandomCard(), getRandomCard()];\n        return set(\n          ['opponents', opponentIndex, 'cards'],\n          [...state.opponents[opponentIndex].cards, ...newCards],\n        )(state);\n      }\n    }\n\n    if (action.name === Action.HandleCardEffectForPlayer) {\n      if (getTopCard(state.cardPile).value == CardValue.PlusTwo) {\n        const newCards = [getRandomCard(false), getRandomCard(false)];\n        return set(['player', 'cards'], [...state.player.cards, ...newCards])(state);\n      }\n    }\n\n    if (action.name === Action.SetNextPlayerTurn) {\n      let nextPlayerIndex;\n      if (state.isReversePlayDirection) {\n        nextPlayerIndex = state.playerTurn !== -1 ? state.playerTurn - 1 : state.opponents.length - 1;\n      } else {\n        nextPlayerIndex = state.playerTurn >= state.opponents.length - 1 ? -1 : state.playerTurn + 1;\n      }\n      return set(['playerTurn'], nextPlayerIndex)(state);\n    }\n\n    if (action.name === Action.PlayerDrawsNewCard) {\n      const newCard = getRandomCard(false);\n      return set(['player', 'cards'], [...state.player.cards, newCard])(state);\n    }\n\n    if (action.name === Action.HandleAnyPlayerOutOfCards) {\n      const opponentOutOfCardsIndex = state.opponents.findIndex(\n        opponent => !opponent.hasExitedGame && opponent.cards.length === 0,\n      );\n      if (opponentOutOfCardsIndex !== -1) {\n        return set(['opponents', opponentOutOfCardsIndex, 'hasExitedGame'], true)(state);\n      }\n      if (state.player.cards.length === 0) {\n        console.log('player exited');\n        return set(['player', 'hasExitedGame'], true)(state);\n      }\n    }\n\n    // Default fallback\n    return state;\n  };\n\n  const initialGameState: GameState = {\n    player: { cards: getInitialHand(false), hasExitedGame: false },\n    opponents: [\n      { name: 'Benny', cards: getInitialHand(), position: TablePosition.OpponentLeft, hasExitedGame: false },\n      { name: 'Fanny', cards: getInitialHand(), position: TablePosition.OpponentRight, hasExitedGame: false },\n    ],\n    cardPile: [toPileCard(getRandomCard())],\n    playerTurn: -1,\n    isReversePlayDirection: false,\n  };\n\n  return useReducer(reducer, initialGameState);\n};\n\nexport default useGameState;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport useGameState from './hooks/useGameState';\nimport { GameState } from './types/commonTypes';\nimport { GameStateAction } from './types/gameStateActionTypes';\n\nexport const GameStateContext = React.createContext(\n  (null as unknown) as { state: GameState; dispatch: React.Dispatch<GameStateAction> },\n);\n\nconst RootComponent: React.FC = () => {\n  const [state, dispatch] = useGameState();\n\n  return (\n    <GameStateContext.Provider value={{ state, dispatch }}>\n      <App />\n    </GameStateContext.Provider>\n  );\n};\n\nReactDOM.render(<RootComponent />, document.getElementById('root'));\n"],"sourceRoot":""}